from django.db import models#_*_ coding:utf-8 _*_from django.db import models'''users表：用户信息catalog:系统表，记录模块post:帖子表comment:评论表Like：点赞表'''class Users(models.Model):    #用户表    user_name = models.CharField(max_length=20, unique=True, verbose_name="用户名", error_messages={        'unique': "用户名已存在"    })    password = models.CharField(max_length=20,)    email = models.EmailField(unique=True, error_messages={        'unique': "邮箱已存在"    })    create_date = models.DateTimeField(auto_now_add=True)   #新建用户时间    valid = models.BooleanField(default=True)  # 是否启用，如果False，将不允许登录    head_picture = models.TextField(null=True, blank=True) #头像    is_online = models.BooleanField(default=False)class Catalog(models.Model):    #模块表    name = models.CharField(max_length=50, unique=True)   #模块名称    display_enabled = models.BooleanField(default=True)     #是否隐藏模块    catalog_url = models.CharField(max_length=50, unique=True,default='#')  #url路径class Post(models.Model):    # 帖子表    title = models.CharField(max_length=60) #帖子名    user_name = models.ForeignKey('Users', related_name='posts',on_delete='cascade')    create_date = models.DateTimeField(auto_now_add=True)    lock = models.BooleanField(default=False)   # 如果帖子被锁定将无法进行评论    catalog = models.ForeignKey('Catalog', related_name='posts',on_delete='cascade')    content = models.TextField() #正文    top = models.BooleanField(default=False)    top_time = models.DateTimeField(null=True)    like_count = models.PositiveIntegerField(default=1)    comment_count = models.PositiveIntegerField(default=0)    img_link = models.TextField(null=True, blank=True)class Comment(models.Model):    # 评论表    user = models.ForeignKey('Users', related_name='comments',on_delete='cascade')    post = models.ForeignKey('Post', related_name='comments',on_delete='cascade')    content = models.TextField()    reply_to = models.PositiveIntegerField(null=True, blank=True)    create_on = models.DateTimeField(auto_now_add=True)    def __str__(self):        return self.contentclass Like ( models.Model ):    #点赞    user = models.ForeignKey ( 'Users', related_name="likes", on_delete='cascade' )    post = models.ForeignKey ( 'Post', related_name="likes", on_delete='cascade' )    class Meta:        unique_together = (('user', 'post'),)